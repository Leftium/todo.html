// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  require(['version', 'jquery', 'coffee-script', 'nodeutil', 'store', 'os', 'todo', 'shellwords'], function(version, $, CoffeeScript, nodeutil, store, os, todo, shellwords) {
    return $(function() {
      var $input, $inputcopy, $inputdiv, $inputl, $inputr, $output, $prompt, SAVED_CONSOLE_LOG, TodoREPL, escapeHTML, init, resizeInput, scrollToBottom;
      SAVED_CONSOLE_LOG = console.log;
      $output = $('#output');
      $input = $('#input');
      $prompt = $('#prompt');
      $inputdiv = $('#inputdiv');
      $inputl = $('#inputl');
      $inputr = $('#inputr');
      $inputcopy = $('#inputcopy');
      escapeHTML = function(s) {
        return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      };
      TodoREPL = (function() {
        var DEFAULT_SETTINGS;

        DEFAULT_SETTINGS = {
          lastVariable: '$_',
          maxLines: 500,
          maxDepth: 2,
          showHidden: false,
          colorize: true
        };

        function TodoREPL(output, input, prompt, settings) {
          var k, v, _ref;
          this.output = output;
          this.input = input;
          this.prompt = prompt;
          if (settings == null) {
            settings = {};
          }
          this.handleKeypress = __bind(this.handleKeypress, this);
          this.clear = __bind(this.clear, this);
          this.addToSaved = __bind(this.addToSaved, this);
          this.addToHistory = __bind(this.addToHistory, this);
          this.setPrompt = __bind(this.setPrompt, this);
          this.processSaved = __bind(this.processSaved, this);
          this.print = __bind(this.print, this);
          this.history = store.get('history');
          this.historyi = -1;
          this.saved = '';
          this.multiline = false;
          this.settings = $.extend({}, DEFAULT_SETTINGS);
          if (localStorage && localStorage.settings) {
            _ref = JSON.parse(localStorage.settings);
            for (k in _ref) {
              v = _ref[k];
              this.settings[k] = v;
            }
          }
          for (k in settings) {
            v = settings[k];
            this.settings[k] = v;
          }
          this.input.keydown(this.handleKeypress);
        }

        TodoREPL.prototype.resetSettings = function() {
          return localStorage.clear();
        };

        TodoREPL.prototype.saveSettings = function() {
          return localStorage.settings = JSON.stringify($.extend({}, this.settings));
        };

        TodoREPL.prototype.print = function() {
          var args, o, s;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          s = args.join(' ') || ' ';
          o = this.output[0].innerHTML + s + '\n';
          this.output[0].innerHTML = o.split('\n').slice(-this.settings.maxLines).join('\n');
          return void 0;
        };

        TodoREPL.prototype.processSaved = function() {
          var argv, compiled, e, output, value, _ref;
          argv = shellwords.split(this.saved);
          if ((_ref = argv[0]) === 'todo' || _ref === 'td' || _ref === 't') {
            this.saved = '';
            output = todo.run(argv.slice(1));
          } else {
            try {
              if (CoffeeScript.compile != null) {
                compiled = CoffeeScript.compile(this.saved);
                compiled = compiled.slice(14, -17);
              } else {
                compiled = this.saved;
              }
              value = eval.call(window, compiled);
              window[this.settings.lastVariable] = value;
              output = nodeutil.inspect(value, this.settings.showHidden, this.settings.maxDepth, this.settings.colorize);
            } catch (_error) {
              e = _error;
              if (e.stack) {
                output = e.stack;
                if (output.split('\n')[0] !== e.toString()) {
                  output = "" + (e.toString()) + "\n\nStack trace:\n" + e.stack;
                }
                output = output.replace(/file.*\//g, '');
              } else {
                output = e.toString();
              }
            }
          }
          this.saved = '';
          return this.print(output.split('\n')[0]);
        };

        TodoREPL.prototype.setPrompt = function() {
          var s;
          s = this.multiline ? '----' : 'todo';
          return this.prompt.html("" + s + "&gt;&nbsp;");
        };

        TodoREPL.prototype.addToHistory = function(s) {
          this.history.unshift(s);
          store.set('history', this.history);
          return this.historyi = -1;
        };

        TodoREPL.prototype.addToSaved = function(s) {
          this.saved += s.slice(0, -1) === '\\' ? s.slice(0, -1) : s;
          this.saved += '\n';
          return this.addToHistory(s);
        };

        TodoREPL.prototype.clear = function() {
          this.output[0].innerHTML = '';
          return void 0;
        };

        TodoREPL.prototype.handleKeypress = function(e) {
          var input;
          switch (e.which) {
            case 13:
              e.preventDefault();
              input = this.input.val();
              this.input.val('');
              this.print(this.prompt.html() + escapeHTML(input));
              if (input) {
                this.addToSaved(input);
                if (input.slice(0, -1) !== '\\' && !this.multiline) {
                  return this.processSaved();
                }
              }
              break;
            case 27:
              e.preventDefault();
              input = this.input.val();
              if (input && this.multiline && this.saved) {
                input = this.input.val();
                this.input.val('');
                this.print(this.prompt.html() + escapeHTML(input));
                this.addToSaved(input);
                this.processSaved();
              } else if (this.multiline && this.saved) {
                this.processSaved();
              }
              this.multiline = !this.multiline;
              return this.setPrompt();
            case 38:
              e.preventDefault();
              if (this.historyi < this.history.length - 1) {
                this.historyi += 1;
                return this.input.val(this.history[this.historyi]);
              }
              break;
            case 40:
              e.preventDefault();
              if (this.historyi > 0) {
                this.historyi += -1;
                return this.input.val(this.history[this.historyi]);
              }
          }
        };

        return TodoREPL;

      })();
      resizeInput = function(e) {
        var content, width;
        width = $inputdiv.width() - $inputl.width();
        content = $input.val();
        content.replace(/\n/g, '<br/>');
        $inputcopy.html(content);
        $inputcopy.width(width);
        $input.width(width);
        return $input.height($inputcopy.height() + 2);
      };
      scrollToBottom = function() {
        return window.scrollTo(0, $prompt[0].offsetTop);
      };
      init = function() {
        var repl;
        $input.keydown(scrollToBottom);
        $(window).resize(resizeInput);
        $input.keyup(resizeInput);
        $input.change(resizeInput);
        $('html').click(function(e) {
          if (e.clientY > $input[0].offsetTop) {
            return $input.focus();
          }
        });
        repl = new TodoREPL($output, $input, $prompt);
        console.log = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          SAVED_CONSOLE_LOG.apply(console, args);
          return repl.print.apply(repl, args);
        };
        window.$$ = repl;
        $('body').css('opacity', 1);
        resizeInput();
        $input.focus();
        window.version = function() {
          return repl.print("<b>todo.html by <a href=http://leftium.com>john-kim murphy</a></b>\nv" + version + " | based on <a href=http://todotxt.com>idea</a> by <a href=http://ginatrapani.org>gina trapani</a> | <a href=http://www.gnu.org/copyleft/gpl.html>gpl license</a> | <a href=https://github.com/Leftium/todo.html>fork me on github</a>!\n");
        };
        window.help = function() {
          return repl.print("<strong>Features</strong>\n<strong>========</strong>\n+ Built-in JavaScript interpreter.\n+ <strong>[Esc]</strong> toggles multiline mode.\n+ <strong>[Up]/[Down] arrow</strong> flips through line history.\n+ <strong>" + repl.settings.lastVariable + "</strong> stores the last returned value.\n+ Access the internals of this console through <strong>$$</strong>.\n+ <strong>$$.clear()</strong> clears this console.\n\n<strong>Settings</strong>\n<strong>========</strong>\nYou can modify the behavior of this REPL by altering <strong>$$.settings</strong>:\n\n+ <strong>lastVariable</strong> (" + repl.settings.lastVariable + "): variable name in which last returned value is stored\n+ <strong>maxLines</strong> (" + repl.settings.maxLines + "): max line count of this console\n+ <strong>maxDepth</strong> (" + repl.settings.maxDepth + "): max depth in which to inspect outputted object\n+ <strong>showHidden</strong> (" + repl.settings.showHidden + "): flag to output hidden (not enumerable) properties of objects\n+ <strong>colorize</strong> (" + repl.settings.colorize + "): flag to colorize output (set to false if REPL is slow)\n\n<strong>$$.saveSettings()</strong> will save settings to localStorage.\n<strong>$$.resetSettings()</strong> will reset settings to default.\n");
        };
        os.ui.echo = repl.print;
        todo.init(store.get('env') || {}, os.fs, os.ui, os.system);
        this.version();
        return repl.print('Welcome! `todo ls +basics` starts a product tour.');
      };
      return init();
    });
  });

}).call(this);
