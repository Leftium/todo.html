// Generated by CoffeeScript 1.6.3
(function() {
  define('store', ['jquery', 'localfile'], function($, localfile) {
    var get, innerHTML, load, matches, save, set, store, todoHtmlPath, todoHtmlRegex;
    todoHtmlPath = localfile.normalizedPath();
    innerHTML = localfile.load(todoHtmlPath) || window.document.documentElement.innerHTML;
    $(function() {
      var $body, bodyChildren;
      $body = $('body');
      bodyChildren = $('body > *');
      $(bodyChildren).detach();
      window.todotxt = $body.html();
      $body.empty();
      return bodyChildren.appendTo($body);
    });
    todoHtmlRegex = /(<head>[\s\S]*<body>){0,1}([\s\S]*)(\n)*(^!!WARNING!{1}!.Do.not.edit.this.line.[^{]*)([\s\S]*)(!!ENDSTORE!{1}![\s\S]*$)/m;
    matches = innerHTML.match(todoHtmlRegex);
    store = JSON.parse(matches[5] || {});
    store.files = store.files || {};
    store.settings = store.settings || {};
    if (store.settings['masterfile']) {
      store.files[store.settings['masterfile']] = matches[2];
    }
    load = function() {
      return store;
    };
    save = function() {
      var jsonStr, masterfileContents, newContents, oldContents, tmp;
      masterfileContents = store.files[store.settings['masterfile']] || '';
      masterfileContents = masterfileContents.replace(/\$/g, '$$$$');
      tmp = store.files[store.settings['masterfile']];
      delete store.files[store.settings['masterfile']];
      jsonStr = JSON.stringify(store);
      jsonStr = jsonStr.replace(/\$/g, '$$$$');
      store.files[store.settings['masterfile']] = tmp;
      if (oldContents = localfile.load(todoHtmlPath)) {
        matches = oldContents.match(todoHtmlRegex);
        newContents = oldContents.replace(todoHtmlRegex, "$1" + masterfileContents + "$3$4" + jsonStr + "$6");
        if (!localfile.save(todoHtmlPath, newContents)) {
          return console.error("store error: can't write to: " + todoHtmlPath);
        }
      } else {
        return console.error("store error: can't read from: " + todoHtmlPath);
      }
    };
    get = function(key) {
      return $.extend(true, {}, store)[key];
    };
    set = function(key, value) {
      store[key] = value;
      return this.save(store);
    };
    return {
      load: load,
      save: save,
      get: get,
      set: set
    };
  });

}).call(this);
